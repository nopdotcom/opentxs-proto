// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PaymentWorkflowEnums.proto

#ifndef PROTOBUF_PaymentWorkflowEnums_2eproto__INCLUDED
#define PROTOBUF_PaymentWorkflowEnums_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_PaymentWorkflowEnums_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
inline void InitDefaults() {
}
}  // namespace protobuf_PaymentWorkflowEnums_2eproto
namespace opentxs {
namespace proto {
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

enum PaymentWorkflowType {
  PAYMENTWORKFLOWTYPE_ERROR = 0,
  PAYMENTWORKFLOWTYPE_OUTGOINGCHEQUE = 1,
  PAYMENTWORKFLOWTYPE_INCOMINGCHEQUE = 2,
  PAYMENTWORKFLOWTYPE_OUTGOINGINVOICE = 3,
  PAYMENTWORKFLOWTYPE_INCOMINGINVOICE = 4,
  PAYMENTWORKFLOWTYPE_OUTGOINGTRANSFER = 5,
  PAYMENTWORKFLOWTYPE_INCOMINGTRANSFER = 6,
  PAYMENTWORKFLOWTYPE_INTERNALTRANSFER = 7
};
bool PaymentWorkflowType_IsValid(int value);
const PaymentWorkflowType PaymentWorkflowType_MIN = PAYMENTWORKFLOWTYPE_ERROR;
const PaymentWorkflowType PaymentWorkflowType_MAX = PAYMENTWORKFLOWTYPE_INTERNALTRANSFER;
const int PaymentWorkflowType_ARRAYSIZE = PaymentWorkflowType_MAX + 1;

enum PaymentWorkflowState {
  PAYMENTWORKFLOWSTATE_ERROR = 0,
  PAYMENTWORKFLOWSTATE_UNSENT = 1,
  PAYMENTWORKFLOWSTATE_CONVEYED = 2,
  PAYMENTWORKFLOWSTATE_CANCELLED = 3,
  PAYMENTWORKFLOWSTATE_ACCEPTED = 4,
  PAYMENTWORKFLOWSTATE_COMPLETED = 5,
  PAYMENTWORKFLOWSTATE_EXPIRED = 6,
  PAYMENTWORKFLOWSTATE_INITIATED = 7,
  PAYMENTWORKFLOWSTATE_ABORTED = 8,
  PAYMENTWORKFLOWSTATE_ACKNOWLEDGED = 9
};
bool PaymentWorkflowState_IsValid(int value);
const PaymentWorkflowState PaymentWorkflowState_MIN = PAYMENTWORKFLOWSTATE_ERROR;
const PaymentWorkflowState PaymentWorkflowState_MAX = PAYMENTWORKFLOWSTATE_ACKNOWLEDGED;
const int PaymentWorkflowState_ARRAYSIZE = PaymentWorkflowState_MAX + 1;

enum EventTransportMethod {
  TRANSPORTMETHOD_ERROR = 0,
  TRANSPORTMETHOD_NONE = 1,
  TRANSPORTMETHOD_OT = 2,
  TRANSPORTMETHOD_OOB = 3
};
bool EventTransportMethod_IsValid(int value);
const EventTransportMethod EventTransportMethod_MIN = TRANSPORTMETHOD_ERROR;
const EventTransportMethod EventTransportMethod_MAX = TRANSPORTMETHOD_OOB;
const int EventTransportMethod_ARRAYSIZE = EventTransportMethod_MAX + 1;

enum PaymentEventType {
  PAYMENTEVENTTYPE_ERROR = 0,
  PAYMENTEVENTTYPE_CREATE = 1,
  PAYMENTEVENTTYPE_CONVEY = 2,
  PAYMENTEVENTTYPE_CANCEL = 3,
  PAYMENTEVENTTYPE_ACCEPT = 4,
  PAYMENTEVENTTYPE_COMPLETE = 5,
  PAYMENTEVENTTYPE_ABORT = 6,
  PAYMENTEVENTTYPE_ACKNOWLEDGE = 7
};
bool PaymentEventType_IsValid(int value);
const PaymentEventType PaymentEventType_MIN = PAYMENTEVENTTYPE_ERROR;
const PaymentEventType PaymentEventType_MAX = PAYMENTEVENTTYPE_ACKNOWLEDGE;
const int PaymentEventType_ARRAYSIZE = PaymentEventType_MAX + 1;

// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::opentxs::proto::PaymentWorkflowType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::PaymentWorkflowState> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::EventTransportMethod> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::PaymentEventType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PaymentWorkflowEnums_2eproto__INCLUDED
