// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPCCommand.proto

#include "RPCCommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class RPCCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCCommand>
      _instance;
} _RPCCommand_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_RPCCommand_2eproto {
void InitDefaultsRPCCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_APIArgument_2eproto::InitDefaultsAPIArgument();
  protobuf_HDSeed_2eproto::InitDefaultsHDSeed();
  protobuf_CreateNym_2eproto::InitDefaultsCreateNym();
  protobuf_AddClaim_2eproto::InitDefaultsAddClaim();
  protobuf_ServerContract_2eproto::InitDefaultsServerContract();
  protobuf_CreateInstrumentDefinition_2eproto::InitDefaultsCreateInstrumentDefinition();
  protobuf_SendPayment_2eproto::InitDefaultsSendPayment();
  protobuf_MoveFunds_2eproto::InitDefaultsMoveFunds();
  protobuf_AddContact_2eproto::InitDefaultsAddContact();
  protobuf_VerifyClaim_2eproto::InitDefaultsVerifyClaim();
  protobuf_SendMessage_2eproto::InitDefaultsSendMessage();
  protobuf_Verification_2eproto::InitDefaultsVerification();
  protobuf_AcceptPendingPayment_2eproto::InitDefaultsAcceptPendingPayment();
  {
    void* ptr = &::opentxs::proto::_RPCCommand_default_instance_;
    new (ptr) ::opentxs::proto::RPCCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::RPCCommand::InitAsDefaultInstance();
}

void InitDefaultsRPCCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCCommandImpl);
}

}  // namespace protobuf_RPCCommand_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void RPCCommand::InitAsDefaultInstance() {
  ::opentxs::proto::_RPCCommand_default_instance_._instance.get_mutable()->hdseed_ = const_cast< ::opentxs::proto::HDSeed*>(
      ::opentxs::proto::HDSeed::internal_default_instance());
  ::opentxs::proto::_RPCCommand_default_instance_._instance.get_mutable()->createnym_ = const_cast< ::opentxs::proto::CreateNym*>(
      ::opentxs::proto::CreateNym::internal_default_instance());
  ::opentxs::proto::_RPCCommand_default_instance_._instance.get_mutable()->createunit_ = const_cast< ::opentxs::proto::CreateInstrumentDefinition*>(
      ::opentxs::proto::CreateInstrumentDefinition::internal_default_instance());
  ::opentxs::proto::_RPCCommand_default_instance_._instance.get_mutable()->sendpayment_ = const_cast< ::opentxs::proto::SendPayment*>(
      ::opentxs::proto::SendPayment::internal_default_instance());
  ::opentxs::proto::_RPCCommand_default_instance_._instance.get_mutable()->movefunds_ = const_cast< ::opentxs::proto::MoveFunds*>(
      ::opentxs::proto::MoveFunds::internal_default_instance());
}
void RPCCommand::clear_arg() {
  arg_.Clear();
}
void RPCCommand::clear_hdseed() {
  if (hdseed_ != NULL) hdseed_->Clear();
  clear_has_hdseed();
}
void RPCCommand::clear_createnym() {
  if (createnym_ != NULL) createnym_->Clear();
  clear_has_createnym();
}
void RPCCommand::clear_claim() {
  claim_.Clear();
}
void RPCCommand::clear_server() {
  server_.Clear();
}
void RPCCommand::clear_createunit() {
  if (createunit_ != NULL) createunit_->Clear();
  clear_has_createunit();
}
void RPCCommand::clear_sendpayment() {
  if (sendpayment_ != NULL) sendpayment_->Clear();
  clear_has_sendpayment();
}
void RPCCommand::clear_movefunds() {
  if (movefunds_ != NULL) movefunds_->Clear();
  clear_has_movefunds();
}
void RPCCommand::clear_addcontact() {
  addcontact_.Clear();
}
void RPCCommand::clear_verifyclaim() {
  verifyclaim_.Clear();
}
void RPCCommand::clear_sendmessage() {
  sendmessage_.Clear();
}
void RPCCommand::clear_acceptverification() {
  acceptverification_.Clear();
}
void RPCCommand::clear_acceptpendingpayment() {
  acceptpendingpayment_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCCommand::kVersionFieldNumber;
const int RPCCommand::kCookieFieldNumber;
const int RPCCommand::kTypeFieldNumber;
const int RPCCommand::kSessionFieldNumber;
const int RPCCommand::kAssociatenymFieldNumber;
const int RPCCommand::kOwnerFieldNumber;
const int RPCCommand::kNotaryFieldNumber;
const int RPCCommand::kUnitFieldNumber;
const int RPCCommand::kIdentifierFieldNumber;
const int RPCCommand::kArgFieldNumber;
const int RPCCommand::kHdseedFieldNumber;
const int RPCCommand::kCreatenymFieldNumber;
const int RPCCommand::kClaimFieldNumber;
const int RPCCommand::kServerFieldNumber;
const int RPCCommand::kCreateunitFieldNumber;
const int RPCCommand::kSendpaymentFieldNumber;
const int RPCCommand::kMovefundsFieldNumber;
const int RPCCommand::kAddcontactFieldNumber;
const int RPCCommand::kVerifyclaimFieldNumber;
const int RPCCommand::kSendmessageFieldNumber;
const int RPCCommand::kAcceptverificationFieldNumber;
const int RPCCommand::kAcceptpendingpaymentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCCommand::RPCCommand()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RPCCommand_2eproto::InitDefaultsRPCCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.RPCCommand)
}
RPCCommand::RPCCommand(const RPCCommand& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      associatenym_(from.associatenym_),
      identifier_(from.identifier_),
      arg_(from.arg_),
      claim_(from.claim_),
      server_(from.server_),
      addcontact_(from.addcontact_),
      verifyclaim_(from.verifyclaim_),
      sendmessage_(from.sendmessage_),
      acceptverification_(from.acceptverification_),
      acceptpendingpayment_(from.acceptpendingpayment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cookie_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cookie()) {
    cookie_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cookie_);
  }
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_owner()) {
    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  notary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notary()) {
    notary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_);
  }
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unit()) {
    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.has_hdseed()) {
    hdseed_ = new ::opentxs::proto::HDSeed(*from.hdseed_);
  } else {
    hdseed_ = NULL;
  }
  if (from.has_createnym()) {
    createnym_ = new ::opentxs::proto::CreateNym(*from.createnym_);
  } else {
    createnym_ = NULL;
  }
  if (from.has_createunit()) {
    createunit_ = new ::opentxs::proto::CreateInstrumentDefinition(*from.createunit_);
  } else {
    createunit_ = NULL;
  }
  if (from.has_sendpayment()) {
    sendpayment_ = new ::opentxs::proto::SendPayment(*from.sendpayment_);
  } else {
    sendpayment_ = NULL;
  }
  if (from.has_movefunds()) {
    movefunds_ = new ::opentxs::proto::MoveFunds(*from.movefunds_);
  } else {
    movefunds_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_) -
    reinterpret_cast<char*>(&version_)) + sizeof(session_));
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.RPCCommand)
}

void RPCCommand::SharedCtor() {
  _cached_size_ = 0;
  cookie_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdseed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_) -
      reinterpret_cast<char*>(&hdseed_)) + sizeof(session_));
}

RPCCommand::~RPCCommand() {
  // @@protoc_insertion_point(destructor:opentxs.proto.RPCCommand)
  SharedDtor();
}

void RPCCommand::SharedDtor() {
  cookie_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdseed_;
  if (this != internal_default_instance()) delete createnym_;
  if (this != internal_default_instance()) delete createunit_;
  if (this != internal_default_instance()) delete sendpayment_;
  if (this != internal_default_instance()) delete movefunds_;
}

void RPCCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCCommand& RPCCommand::default_instance() {
  ::protobuf_RPCCommand_2eproto::InitDefaultsRPCCommand();
  return *internal_default_instance();
}

RPCCommand* RPCCommand::New(::google::protobuf::Arena* arena) const {
  RPCCommand* n = new RPCCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.RPCCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  associatenym_.Clear();
  identifier_.Clear();
  arg_.Clear();
  claim_.Clear();
  server_.Clear();
  addcontact_.Clear();
  verifyclaim_.Clear();
  sendmessage_.Clear();
  acceptverification_.Clear();
  acceptpendingpayment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!cookie_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cookie_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!owner_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*owner_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!notary_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notary_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!unit_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*unit_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(hdseed_ != NULL);
      hdseed_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(createnym_ != NULL);
      createnym_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(createunit_ != NULL);
      createunit_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(sendpayment_ != NULL);
      sendpayment_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(movefunds_ != NULL);
    movefunds_->Clear();
  }
  if (cached_has_bits & 3584u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_) -
        reinterpret_cast<char*>(&version_)) + sizeof(session_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RPCCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.RPCCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cookie = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.RPCCommandType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::RPCCommandType_IsValid(value)) {
            set_type(static_cast< ::opentxs::proto::RPCCommandType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string associatenym = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_associatenym()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string owner = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notary = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string identifier = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_identifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.APIArgument arg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_arg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.HDSeed hdseed = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdseed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.CreateNym createnym = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_createnym()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.AddClaim claim = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_claim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.ServerContract server = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.CreateInstrumentDefinition createunit = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_createunit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.SendPayment sendpayment = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sendpayment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.MoveFunds movefunds = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_movefunds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.AddContact addcontact = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_addcontact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.VerifyClaim verifyclaim = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_verifyclaim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.SendMessage sendmessage = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sendmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.Verification acceptverification = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_acceptverification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.AcceptPendingPayment acceptpendingpayment = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_acceptpendingpayment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.RPCCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.RPCCommand)
  return false;
#undef DO_
}

void RPCCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.RPCCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string cookie = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cookie(), output);
  }

  // optional .opentxs.proto.RPCCommandType type = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 session = 4;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->session(), output);
  }

  // repeated string associatenym = 5;
  for (int i = 0, n = this->associatenym_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->associatenym(i), output);
  }

  // optional string owner = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->owner(), output);
  }

  // optional string notary = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->notary(), output);
  }

  // optional string unit = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->unit(), output);
  }

  // repeated string identifier = 9;
  for (int i = 0, n = this->identifier_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->identifier(i), output);
  }

  // repeated .opentxs.proto.APIArgument arg = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->arg(static_cast<int>(i)), output);
  }

  // optional .opentxs.proto.HDSeed hdseed = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->hdseed_, output);
  }

  // optional .opentxs.proto.CreateNym createnym = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->createnym_, output);
  }

  // repeated .opentxs.proto.AddClaim claim = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->claim_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->claim(static_cast<int>(i)), output);
  }

  // repeated .opentxs.proto.ServerContract server = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->server(static_cast<int>(i)), output);
  }

  // optional .opentxs.proto.CreateInstrumentDefinition createunit = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->createunit_, output);
  }

  // optional .opentxs.proto.SendPayment sendpayment = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, *this->sendpayment_, output);
  }

  // optional .opentxs.proto.MoveFunds movefunds = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, *this->movefunds_, output);
  }

  // repeated .opentxs.proto.AddContact addcontact = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addcontact_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->addcontact(static_cast<int>(i)), output);
  }

  // repeated .opentxs.proto.VerifyClaim verifyclaim = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->verifyclaim_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->verifyclaim(static_cast<int>(i)), output);
  }

  // repeated .opentxs.proto.SendMessage sendmessage = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sendmessage_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->sendmessage(static_cast<int>(i)), output);
  }

  // repeated .opentxs.proto.Verification acceptverification = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acceptverification_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->acceptverification(static_cast<int>(i)), output);
  }

  // repeated .opentxs.proto.AcceptPendingPayment acceptpendingpayment = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acceptpendingpayment_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->acceptpendingpayment(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.RPCCommand)
}

size_t RPCCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.RPCCommand)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated string associatenym = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->associatenym_size());
  for (int i = 0, n = this->associatenym_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->associatenym(i));
  }

  // repeated string identifier = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->identifier_size());
  for (int i = 0, n = this->identifier_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->identifier(i));
  }

  // repeated .opentxs.proto.APIArgument arg = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->arg_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->arg(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.AddClaim claim = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->claim_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->claim(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.ServerContract server = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->server_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->server(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.AddContact addcontact = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->addcontact_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->addcontact(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.VerifyClaim verifyclaim = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->verifyclaim_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->verifyclaim(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.SendMessage sendmessage = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->sendmessage_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sendmessage(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.Verification acceptverification = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->acceptverification_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->acceptverification(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.AcceptPendingPayment acceptpendingpayment = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->acceptpendingpayment_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->acceptpendingpayment(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string cookie = 2;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // optional string owner = 6;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner());
    }

    // optional string notary = 7;
    if (has_notary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notary());
    }

    // optional string unit = 8;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }

    // optional .opentxs.proto.HDSeed hdseed = 11;
    if (has_hdseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->hdseed_);
    }

    // optional .opentxs.proto.CreateNym createnym = 12;
    if (has_createnym()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->createnym_);
    }

    // optional .opentxs.proto.CreateInstrumentDefinition createunit = 15;
    if (has_createunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->createunit_);
    }

    // optional .opentxs.proto.SendPayment sendpayment = 16;
    if (has_sendpayment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->sendpayment_);
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .opentxs.proto.MoveFunds movefunds = 17;
    if (has_movefunds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->movefunds_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.RPCCommandType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 session = 4;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCCommand::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCCommand*>(&from));
}

void RPCCommand::MergeFrom(const RPCCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.RPCCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  associatenym_.MergeFrom(from.associatenym_);
  identifier_.MergeFrom(from.identifier_);
  arg_.MergeFrom(from.arg_);
  claim_.MergeFrom(from.claim_);
  server_.MergeFrom(from.server_);
  addcontact_.MergeFrom(from.addcontact_);
  verifyclaim_.MergeFrom(from.verifyclaim_);
  sendmessage_.MergeFrom(from.sendmessage_);
  acceptverification_.MergeFrom(from.acceptverification_);
  acceptpendingpayment_.MergeFrom(from.acceptpendingpayment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cookie();
      cookie_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cookie_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_owner();
      owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_notary();
      notary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_unit();
      unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_hdseed()->::opentxs::proto::HDSeed::MergeFrom(from.hdseed());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_createnym()->::opentxs::proto::CreateNym::MergeFrom(from.createnym());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_createunit()->::opentxs::proto::CreateInstrumentDefinition::MergeFrom(from.createunit());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_sendpayment()->::opentxs::proto::SendPayment::MergeFrom(from.sendpayment());
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_movefunds()->::opentxs::proto::MoveFunds::MergeFrom(from.movefunds());
    }
    if (cached_has_bits & 0x00000200u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000800u) {
      session_ = from.session_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RPCCommand::CopyFrom(const RPCCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.RPCCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCCommand::IsInitialized() const {
  return true;
}

void RPCCommand::Swap(RPCCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCCommand::InternalSwap(RPCCommand* other) {
  using std::swap;
  associatenym_.InternalSwap(&other->associatenym_);
  identifier_.InternalSwap(&other->identifier_);
  arg_.InternalSwap(&other->arg_);
  claim_.InternalSwap(&other->claim_);
  server_.InternalSwap(&other->server_);
  addcontact_.InternalSwap(&other->addcontact_);
  verifyclaim_.InternalSwap(&other->verifyclaim_);
  sendmessage_.InternalSwap(&other->sendmessage_);
  acceptverification_.InternalSwap(&other->acceptverification_);
  acceptpendingpayment_.InternalSwap(&other->acceptpendingpayment_);
  cookie_.Swap(&other->cookie_);
  owner_.Swap(&other->owner_);
  notary_.Swap(&other->notary_);
  unit_.Swap(&other->unit_);
  swap(hdseed_, other->hdseed_);
  swap(createnym_, other->createnym_);
  swap(createunit_, other->createunit_);
  swap(sendpayment_, other->sendpayment_);
  swap(movefunds_, other->movefunds_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(session_, other->session_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RPCCommand::GetTypeName() const {
  return "opentxs.proto.RPCCommand";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
