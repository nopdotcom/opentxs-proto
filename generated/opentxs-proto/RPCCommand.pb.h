// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPCCommand.proto

#ifndef PROTOBUF_RPCCommand_2eproto__INCLUDED
#define PROTOBUF_RPCCommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "AcceptPendingPayment.pb.h"  // IWYU pragma: export
#include "AddClaim.pb.h"  // IWYU pragma: export
#include "AddContact.pb.h"  // IWYU pragma: export
#include "APIArgument.pb.h"  // IWYU pragma: export
#include "CreateInstrumentDefinition.pb.h"  // IWYU pragma: export
#include "CreateNym.pb.h"  // IWYU pragma: export
#include "HDSeed.pb.h"  // IWYU pragma: export
#include "MoveFunds.pb.h"  // IWYU pragma: export
#include "RPCEnums.pb.h"  // IWYU pragma: export
#include "SendMessage.pb.h"  // IWYU pragma: export
#include "SendPayment.pb.h"  // IWYU pragma: export
#include "ServerContract.pb.h"  // IWYU pragma: export
#include "Verification.pb.h"  // IWYU pragma: export
#include "VerifyClaim.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_RPCCommand_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsRPCCommandImpl();
void InitDefaultsRPCCommand();
inline void InitDefaults() {
  InitDefaultsRPCCommand();
}
}  // namespace protobuf_RPCCommand_2eproto
namespace opentxs {
namespace proto {
class RPCCommand;
class RPCCommandDefaultTypeInternal;
extern RPCCommandDefaultTypeInternal _RPCCommand_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class RPCCommand : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.RPCCommand) */ {
 public:
  RPCCommand();
  virtual ~RPCCommand();

  RPCCommand(const RPCCommand& from);

  inline RPCCommand& operator=(const RPCCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCCommand(RPCCommand&& from) noexcept
    : RPCCommand() {
    *this = ::std::move(from);
  }

  inline RPCCommand& operator=(RPCCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RPCCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCCommand* internal_default_instance() {
    return reinterpret_cast<const RPCCommand*>(
               &_RPCCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RPCCommand* other);
  friend void swap(RPCCommand& a, RPCCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RPCCommand& from);
  void MergeFrom(const RPCCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string associatenym = 5;
  int associatenym_size() const;
  void clear_associatenym();
  static const int kAssociatenymFieldNumber = 5;
  const ::std::string& associatenym(int index) const;
  ::std::string* mutable_associatenym(int index);
  void set_associatenym(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_associatenym(int index, ::std::string&& value);
  #endif
  void set_associatenym(int index, const char* value);
  void set_associatenym(int index, const char* value, size_t size);
  ::std::string* add_associatenym();
  void add_associatenym(const ::std::string& value);
  #if LANG_CXX11
  void add_associatenym(::std::string&& value);
  #endif
  void add_associatenym(const char* value);
  void add_associatenym(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& associatenym() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_associatenym();

  // repeated string identifier = 9;
  int identifier_size() const;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 9;
  const ::std::string& identifier(int index) const;
  ::std::string* mutable_identifier(int index);
  void set_identifier(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_identifier(int index, ::std::string&& value);
  #endif
  void set_identifier(int index, const char* value);
  void set_identifier(int index, const char* value, size_t size);
  ::std::string* add_identifier();
  void add_identifier(const ::std::string& value);
  #if LANG_CXX11
  void add_identifier(::std::string&& value);
  #endif
  void add_identifier(const char* value);
  void add_identifier(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& identifier() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_identifier();

  // repeated .opentxs.proto.APIArgument arg = 10;
  int arg_size() const;
  void clear_arg();
  static const int kArgFieldNumber = 10;
  const ::opentxs::proto::APIArgument& arg(int index) const;
  ::opentxs::proto::APIArgument* mutable_arg(int index);
  ::opentxs::proto::APIArgument* add_arg();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::APIArgument >*
      mutable_arg();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::APIArgument >&
      arg() const;

  // repeated .opentxs.proto.AddClaim claim = 13;
  int claim_size() const;
  void clear_claim();
  static const int kClaimFieldNumber = 13;
  const ::opentxs::proto::AddClaim& claim(int index) const;
  ::opentxs::proto::AddClaim* mutable_claim(int index);
  ::opentxs::proto::AddClaim* add_claim();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddClaim >*
      mutable_claim();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddClaim >&
      claim() const;

  // repeated .opentxs.proto.ServerContract server = 14;
  int server_size() const;
  void clear_server();
  static const int kServerFieldNumber = 14;
  const ::opentxs::proto::ServerContract& server(int index) const;
  ::opentxs::proto::ServerContract* mutable_server(int index);
  ::opentxs::proto::ServerContract* add_server();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::ServerContract >*
      mutable_server();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::ServerContract >&
      server() const;

  // repeated .opentxs.proto.AddContact addcontact = 18;
  int addcontact_size() const;
  void clear_addcontact();
  static const int kAddcontactFieldNumber = 18;
  const ::opentxs::proto::AddContact& addcontact(int index) const;
  ::opentxs::proto::AddContact* mutable_addcontact(int index);
  ::opentxs::proto::AddContact* add_addcontact();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddContact >*
      mutable_addcontact();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddContact >&
      addcontact() const;

  // repeated .opentxs.proto.VerifyClaim verifyclaim = 19;
  int verifyclaim_size() const;
  void clear_verifyclaim();
  static const int kVerifyclaimFieldNumber = 19;
  const ::opentxs::proto::VerifyClaim& verifyclaim(int index) const;
  ::opentxs::proto::VerifyClaim* mutable_verifyclaim(int index);
  ::opentxs::proto::VerifyClaim* add_verifyclaim();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::VerifyClaim >*
      mutable_verifyclaim();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::VerifyClaim >&
      verifyclaim() const;

  // repeated .opentxs.proto.SendMessage sendmessage = 20;
  int sendmessage_size() const;
  void clear_sendmessage();
  static const int kSendmessageFieldNumber = 20;
  const ::opentxs::proto::SendMessage& sendmessage(int index) const;
  ::opentxs::proto::SendMessage* mutable_sendmessage(int index);
  ::opentxs::proto::SendMessage* add_sendmessage();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::SendMessage >*
      mutable_sendmessage();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::SendMessage >&
      sendmessage() const;

  // repeated .opentxs.proto.Verification acceptverification = 21;
  int acceptverification_size() const;
  void clear_acceptverification();
  static const int kAcceptverificationFieldNumber = 21;
  const ::opentxs::proto::Verification& acceptverification(int index) const;
  ::opentxs::proto::Verification* mutable_acceptverification(int index);
  ::opentxs::proto::Verification* add_acceptverification();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::Verification >*
      mutable_acceptverification();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::Verification >&
      acceptverification() const;

  // repeated .opentxs.proto.AcceptPendingPayment acceptpendingpayment = 22;
  int acceptpendingpayment_size() const;
  void clear_acceptpendingpayment();
  static const int kAcceptpendingpaymentFieldNumber = 22;
  const ::opentxs::proto::AcceptPendingPayment& acceptpendingpayment(int index) const;
  ::opentxs::proto::AcceptPendingPayment* mutable_acceptpendingpayment(int index);
  ::opentxs::proto::AcceptPendingPayment* add_acceptpendingpayment();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AcceptPendingPayment >*
      mutable_acceptpendingpayment();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AcceptPendingPayment >&
      acceptpendingpayment() const;

  // optional string cookie = 2;
  bool has_cookie() const;
  void clear_cookie();
  static const int kCookieFieldNumber = 2;
  const ::std::string& cookie() const;
  void set_cookie(const ::std::string& value);
  #if LANG_CXX11
  void set_cookie(::std::string&& value);
  #endif
  void set_cookie(const char* value);
  void set_cookie(const char* value, size_t size);
  ::std::string* mutable_cookie();
  ::std::string* release_cookie();
  void set_allocated_cookie(::std::string* cookie);

  // optional string owner = 6;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 6;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // optional string notary = 7;
  bool has_notary() const;
  void clear_notary();
  static const int kNotaryFieldNumber = 7;
  const ::std::string& notary() const;
  void set_notary(const ::std::string& value);
  #if LANG_CXX11
  void set_notary(::std::string&& value);
  #endif
  void set_notary(const char* value);
  void set_notary(const char* value, size_t size);
  ::std::string* mutable_notary();
  ::std::string* release_notary();
  void set_allocated_notary(::std::string* notary);

  // optional string unit = 8;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 8;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_unit(::std::string&& value);
  #endif
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // optional .opentxs.proto.HDSeed hdseed = 11;
  bool has_hdseed() const;
  void clear_hdseed();
  static const int kHdseedFieldNumber = 11;
  const ::opentxs::proto::HDSeed& hdseed() const;
  ::opentxs::proto::HDSeed* release_hdseed();
  ::opentxs::proto::HDSeed* mutable_hdseed();
  void set_allocated_hdseed(::opentxs::proto::HDSeed* hdseed);

  // optional .opentxs.proto.CreateNym createnym = 12;
  bool has_createnym() const;
  void clear_createnym();
  static const int kCreatenymFieldNumber = 12;
  const ::opentxs::proto::CreateNym& createnym() const;
  ::opentxs::proto::CreateNym* release_createnym();
  ::opentxs::proto::CreateNym* mutable_createnym();
  void set_allocated_createnym(::opentxs::proto::CreateNym* createnym);

  // optional .opentxs.proto.CreateInstrumentDefinition createunit = 15;
  bool has_createunit() const;
  void clear_createunit();
  static const int kCreateunitFieldNumber = 15;
  const ::opentxs::proto::CreateInstrumentDefinition& createunit() const;
  ::opentxs::proto::CreateInstrumentDefinition* release_createunit();
  ::opentxs::proto::CreateInstrumentDefinition* mutable_createunit();
  void set_allocated_createunit(::opentxs::proto::CreateInstrumentDefinition* createunit);

  // optional .opentxs.proto.SendPayment sendpayment = 16;
  bool has_sendpayment() const;
  void clear_sendpayment();
  static const int kSendpaymentFieldNumber = 16;
  const ::opentxs::proto::SendPayment& sendpayment() const;
  ::opentxs::proto::SendPayment* release_sendpayment();
  ::opentxs::proto::SendPayment* mutable_sendpayment();
  void set_allocated_sendpayment(::opentxs::proto::SendPayment* sendpayment);

  // optional .opentxs.proto.MoveFunds movefunds = 17;
  bool has_movefunds() const;
  void clear_movefunds();
  static const int kMovefundsFieldNumber = 17;
  const ::opentxs::proto::MoveFunds& movefunds() const;
  ::opentxs::proto::MoveFunds* release_movefunds();
  ::opentxs::proto::MoveFunds* mutable_movefunds();
  void set_allocated_movefunds(::opentxs::proto::MoveFunds* movefunds);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.RPCCommandType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::opentxs::proto::RPCCommandType type() const;
  void set_type(::opentxs::proto::RPCCommandType value);

  // optional int32 session = 4;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 4;
  ::google::protobuf::int32 session() const;
  void set_session(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.RPCCommand)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_cookie();
  void clear_has_cookie();
  void set_has_type();
  void clear_has_type();
  void set_has_session();
  void clear_has_session();
  void set_has_owner();
  void clear_has_owner();
  void set_has_notary();
  void clear_has_notary();
  void set_has_unit();
  void clear_has_unit();
  void set_has_hdseed();
  void clear_has_hdseed();
  void set_has_createnym();
  void clear_has_createnym();
  void set_has_createunit();
  void clear_has_createunit();
  void set_has_sendpayment();
  void clear_has_sendpayment();
  void set_has_movefunds();
  void clear_has_movefunds();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> associatenym_;
  ::google::protobuf::RepeatedPtrField< ::std::string> identifier_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::APIArgument > arg_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddClaim > claim_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::ServerContract > server_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddContact > addcontact_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::VerifyClaim > verifyclaim_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::SendMessage > sendmessage_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::Verification > acceptverification_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AcceptPendingPayment > acceptpendingpayment_;
  ::google::protobuf::internal::ArenaStringPtr cookie_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::internal::ArenaStringPtr notary_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  ::opentxs::proto::HDSeed* hdseed_;
  ::opentxs::proto::CreateNym* createnym_;
  ::opentxs::proto::CreateInstrumentDefinition* createunit_;
  ::opentxs::proto::SendPayment* sendpayment_;
  ::opentxs::proto::MoveFunds* movefunds_;
  ::google::protobuf::uint32 version_;
  int type_;
  ::google::protobuf::int32 session_;
  friend struct ::protobuf_RPCCommand_2eproto::TableStruct;
  friend void ::protobuf_RPCCommand_2eproto::InitDefaultsRPCCommandImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPCCommand

// optional uint32 version = 1;
inline bool RPCCommand::has_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RPCCommand::set_has_version() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RPCCommand::clear_has_version() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RPCCommand::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 RPCCommand::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.version)
  return version_;
}
inline void RPCCommand::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.RPCCommand.version)
}

// optional string cookie = 2;
inline bool RPCCommand::has_cookie() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCCommand::set_has_cookie() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCCommand::clear_has_cookie() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCCommand::clear_cookie() {
  cookie_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cookie();
}
inline const ::std::string& RPCCommand::cookie() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.cookie)
  return cookie_.GetNoArena();
}
inline void RPCCommand::set_cookie(const ::std::string& value) {
  set_has_cookie();
  cookie_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.RPCCommand.cookie)
}
#if LANG_CXX11
inline void RPCCommand::set_cookie(::std::string&& value) {
  set_has_cookie();
  cookie_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.RPCCommand.cookie)
}
#endif
inline void RPCCommand::set_cookie(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cookie();
  cookie_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.RPCCommand.cookie)
}
inline void RPCCommand::set_cookie(const char* value, size_t size) {
  set_has_cookie();
  cookie_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.RPCCommand.cookie)
}
inline ::std::string* RPCCommand::mutable_cookie() {
  set_has_cookie();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.cookie)
  return cookie_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCCommand::release_cookie() {
  // @@protoc_insertion_point(field_release:opentxs.proto.RPCCommand.cookie)
  clear_has_cookie();
  return cookie_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCCommand::set_allocated_cookie(::std::string* cookie) {
  if (cookie != NULL) {
    set_has_cookie();
  } else {
    clear_has_cookie();
  }
  cookie_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cookie);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.RPCCommand.cookie)
}

// optional .opentxs.proto.RPCCommandType type = 3;
inline bool RPCCommand::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RPCCommand::set_has_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RPCCommand::clear_has_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RPCCommand::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::RPCCommandType RPCCommand::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.type)
  return static_cast< ::opentxs::proto::RPCCommandType >(type_);
}
inline void RPCCommand::set_type(::opentxs::proto::RPCCommandType value) {
  assert(::opentxs::proto::RPCCommandType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.RPCCommand.type)
}

// optional int32 session = 4;
inline bool RPCCommand::has_session() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RPCCommand::set_has_session() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RPCCommand::clear_has_session() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RPCCommand::clear_session() {
  session_ = 0;
  clear_has_session();
}
inline ::google::protobuf::int32 RPCCommand::session() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.session)
  return session_;
}
inline void RPCCommand::set_session(::google::protobuf::int32 value) {
  set_has_session();
  session_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.RPCCommand.session)
}

// repeated string associatenym = 5;
inline int RPCCommand::associatenym_size() const {
  return associatenym_.size();
}
inline void RPCCommand::clear_associatenym() {
  associatenym_.Clear();
}
inline const ::std::string& RPCCommand::associatenym(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.associatenym)
  return associatenym_.Get(index);
}
inline ::std::string* RPCCommand::mutable_associatenym(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.associatenym)
  return associatenym_.Mutable(index);
}
inline void RPCCommand::set_associatenym(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.RPCCommand.associatenym)
  associatenym_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RPCCommand::set_associatenym(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.RPCCommand.associatenym)
  associatenym_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RPCCommand::set_associatenym(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  associatenym_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.proto.RPCCommand.associatenym)
}
inline void RPCCommand::set_associatenym(int index, const char* value, size_t size) {
  associatenym_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.RPCCommand.associatenym)
}
inline ::std::string* RPCCommand::add_associatenym() {
  // @@protoc_insertion_point(field_add_mutable:opentxs.proto.RPCCommand.associatenym)
  return associatenym_.Add();
}
inline void RPCCommand::add_associatenym(const ::std::string& value) {
  associatenym_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.RPCCommand.associatenym)
}
#if LANG_CXX11
inline void RPCCommand::add_associatenym(::std::string&& value) {
  associatenym_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentxs.proto.RPCCommand.associatenym)
}
#endif
inline void RPCCommand::add_associatenym(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  associatenym_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentxs.proto.RPCCommand.associatenym)
}
inline void RPCCommand::add_associatenym(const char* value, size_t size) {
  associatenym_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentxs.proto.RPCCommand.associatenym)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RPCCommand::associatenym() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.RPCCommand.associatenym)
  return associatenym_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RPCCommand::mutable_associatenym() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.RPCCommand.associatenym)
  return &associatenym_;
}

// optional string owner = 6;
inline bool RPCCommand::has_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPCCommand::set_has_owner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPCCommand::clear_has_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPCCommand::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner();
}
inline const ::std::string& RPCCommand::owner() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.owner)
  return owner_.GetNoArena();
}
inline void RPCCommand::set_owner(const ::std::string& value) {
  set_has_owner();
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.RPCCommand.owner)
}
#if LANG_CXX11
inline void RPCCommand::set_owner(::std::string&& value) {
  set_has_owner();
  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.RPCCommand.owner)
}
#endif
inline void RPCCommand::set_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_owner();
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.RPCCommand.owner)
}
inline void RPCCommand::set_owner(const char* value, size_t size) {
  set_has_owner();
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.RPCCommand.owner)
}
inline ::std::string* RPCCommand::mutable_owner() {
  set_has_owner();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCCommand::release_owner() {
  // @@protoc_insertion_point(field_release:opentxs.proto.RPCCommand.owner)
  clear_has_owner();
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCCommand::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    set_has_owner();
  } else {
    clear_has_owner();
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.RPCCommand.owner)
}

// optional string notary = 7;
inline bool RPCCommand::has_notary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RPCCommand::set_has_notary() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RPCCommand::clear_has_notary() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RPCCommand::clear_notary() {
  notary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_notary();
}
inline const ::std::string& RPCCommand::notary() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.notary)
  return notary_.GetNoArena();
}
inline void RPCCommand::set_notary(const ::std::string& value) {
  set_has_notary();
  notary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.RPCCommand.notary)
}
#if LANG_CXX11
inline void RPCCommand::set_notary(::std::string&& value) {
  set_has_notary();
  notary_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.RPCCommand.notary)
}
#endif
inline void RPCCommand::set_notary(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_notary();
  notary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.RPCCommand.notary)
}
inline void RPCCommand::set_notary(const char* value, size_t size) {
  set_has_notary();
  notary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.RPCCommand.notary)
}
inline ::std::string* RPCCommand::mutable_notary() {
  set_has_notary();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.notary)
  return notary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCCommand::release_notary() {
  // @@protoc_insertion_point(field_release:opentxs.proto.RPCCommand.notary)
  clear_has_notary();
  return notary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCCommand::set_allocated_notary(::std::string* notary) {
  if (notary != NULL) {
    set_has_notary();
  } else {
    clear_has_notary();
  }
  notary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notary);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.RPCCommand.notary)
}

// optional string unit = 8;
inline bool RPCCommand::has_unit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RPCCommand::set_has_unit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RPCCommand::clear_has_unit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RPCCommand::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unit();
}
inline const ::std::string& RPCCommand::unit() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.unit)
  return unit_.GetNoArena();
}
inline void RPCCommand::set_unit(const ::std::string& value) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.RPCCommand.unit)
}
#if LANG_CXX11
inline void RPCCommand::set_unit(::std::string&& value) {
  set_has_unit();
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.RPCCommand.unit)
}
#endif
inline void RPCCommand::set_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.RPCCommand.unit)
}
inline void RPCCommand::set_unit(const char* value, size_t size) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.RPCCommand.unit)
}
inline ::std::string* RPCCommand::mutable_unit() {
  set_has_unit();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCCommand::release_unit() {
  // @@protoc_insertion_point(field_release:opentxs.proto.RPCCommand.unit)
  clear_has_unit();
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCCommand::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.RPCCommand.unit)
}

// repeated string identifier = 9;
inline int RPCCommand::identifier_size() const {
  return identifier_.size();
}
inline void RPCCommand::clear_identifier() {
  identifier_.Clear();
}
inline const ::std::string& RPCCommand::identifier(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.identifier)
  return identifier_.Get(index);
}
inline ::std::string* RPCCommand::mutable_identifier(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.identifier)
  return identifier_.Mutable(index);
}
inline void RPCCommand::set_identifier(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.RPCCommand.identifier)
  identifier_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RPCCommand::set_identifier(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.RPCCommand.identifier)
  identifier_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RPCCommand::set_identifier(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  identifier_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.proto.RPCCommand.identifier)
}
inline void RPCCommand::set_identifier(int index, const char* value, size_t size) {
  identifier_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.RPCCommand.identifier)
}
inline ::std::string* RPCCommand::add_identifier() {
  // @@protoc_insertion_point(field_add_mutable:opentxs.proto.RPCCommand.identifier)
  return identifier_.Add();
}
inline void RPCCommand::add_identifier(const ::std::string& value) {
  identifier_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.RPCCommand.identifier)
}
#if LANG_CXX11
inline void RPCCommand::add_identifier(::std::string&& value) {
  identifier_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentxs.proto.RPCCommand.identifier)
}
#endif
inline void RPCCommand::add_identifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  identifier_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentxs.proto.RPCCommand.identifier)
}
inline void RPCCommand::add_identifier(const char* value, size_t size) {
  identifier_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentxs.proto.RPCCommand.identifier)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RPCCommand::identifier() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.RPCCommand.identifier)
  return identifier_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RPCCommand::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.RPCCommand.identifier)
  return &identifier_;
}

// repeated .opentxs.proto.APIArgument arg = 10;
inline int RPCCommand::arg_size() const {
  return arg_.size();
}
inline const ::opentxs::proto::APIArgument& RPCCommand::arg(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.arg)
  return arg_.Get(index);
}
inline ::opentxs::proto::APIArgument* RPCCommand::mutable_arg(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.arg)
  return arg_.Mutable(index);
}
inline ::opentxs::proto::APIArgument* RPCCommand::add_arg() {
  // @@protoc_insertion_point(field_add:opentxs.proto.RPCCommand.arg)
  return arg_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::APIArgument >*
RPCCommand::mutable_arg() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.RPCCommand.arg)
  return &arg_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::APIArgument >&
RPCCommand::arg() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.RPCCommand.arg)
  return arg_;
}

// optional .opentxs.proto.HDSeed hdseed = 11;
inline bool RPCCommand::has_hdseed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RPCCommand::set_has_hdseed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RPCCommand::clear_has_hdseed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::opentxs::proto::HDSeed& RPCCommand::hdseed() const {
  const ::opentxs::proto::HDSeed* p = hdseed_;
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.hdseed)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::HDSeed*>(
      &::opentxs::proto::_HDSeed_default_instance_);
}
inline ::opentxs::proto::HDSeed* RPCCommand::release_hdseed() {
  // @@protoc_insertion_point(field_release:opentxs.proto.RPCCommand.hdseed)
  clear_has_hdseed();
  ::opentxs::proto::HDSeed* temp = hdseed_;
  hdseed_ = NULL;
  return temp;
}
inline ::opentxs::proto::HDSeed* RPCCommand::mutable_hdseed() {
  set_has_hdseed();
  if (hdseed_ == NULL) {
    hdseed_ = new ::opentxs::proto::HDSeed;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.hdseed)
  return hdseed_;
}
inline void RPCCommand::set_allocated_hdseed(::opentxs::proto::HDSeed* hdseed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hdseed_);
  }
  if (hdseed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdseed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdseed, submessage_arena);
    }
    set_has_hdseed();
  } else {
    clear_has_hdseed();
  }
  hdseed_ = hdseed;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.RPCCommand.hdseed)
}

// optional .opentxs.proto.CreateNym createnym = 12;
inline bool RPCCommand::has_createnym() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RPCCommand::set_has_createnym() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RPCCommand::clear_has_createnym() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::opentxs::proto::CreateNym& RPCCommand::createnym() const {
  const ::opentxs::proto::CreateNym* p = createnym_;
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.createnym)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::CreateNym*>(
      &::opentxs::proto::_CreateNym_default_instance_);
}
inline ::opentxs::proto::CreateNym* RPCCommand::release_createnym() {
  // @@protoc_insertion_point(field_release:opentxs.proto.RPCCommand.createnym)
  clear_has_createnym();
  ::opentxs::proto::CreateNym* temp = createnym_;
  createnym_ = NULL;
  return temp;
}
inline ::opentxs::proto::CreateNym* RPCCommand::mutable_createnym() {
  set_has_createnym();
  if (createnym_ == NULL) {
    createnym_ = new ::opentxs::proto::CreateNym;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.createnym)
  return createnym_;
}
inline void RPCCommand::set_allocated_createnym(::opentxs::proto::CreateNym* createnym) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(createnym_);
  }
  if (createnym) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      createnym = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, createnym, submessage_arena);
    }
    set_has_createnym();
  } else {
    clear_has_createnym();
  }
  createnym_ = createnym;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.RPCCommand.createnym)
}

// repeated .opentxs.proto.AddClaim claim = 13;
inline int RPCCommand::claim_size() const {
  return claim_.size();
}
inline const ::opentxs::proto::AddClaim& RPCCommand::claim(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.claim)
  return claim_.Get(index);
}
inline ::opentxs::proto::AddClaim* RPCCommand::mutable_claim(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.claim)
  return claim_.Mutable(index);
}
inline ::opentxs::proto::AddClaim* RPCCommand::add_claim() {
  // @@protoc_insertion_point(field_add:opentxs.proto.RPCCommand.claim)
  return claim_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddClaim >*
RPCCommand::mutable_claim() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.RPCCommand.claim)
  return &claim_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddClaim >&
RPCCommand::claim() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.RPCCommand.claim)
  return claim_;
}

// repeated .opentxs.proto.ServerContract server = 14;
inline int RPCCommand::server_size() const {
  return server_.size();
}
inline const ::opentxs::proto::ServerContract& RPCCommand::server(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.server)
  return server_.Get(index);
}
inline ::opentxs::proto::ServerContract* RPCCommand::mutable_server(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.server)
  return server_.Mutable(index);
}
inline ::opentxs::proto::ServerContract* RPCCommand::add_server() {
  // @@protoc_insertion_point(field_add:opentxs.proto.RPCCommand.server)
  return server_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::ServerContract >*
RPCCommand::mutable_server() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.RPCCommand.server)
  return &server_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::ServerContract >&
RPCCommand::server() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.RPCCommand.server)
  return server_;
}

// optional .opentxs.proto.CreateInstrumentDefinition createunit = 15;
inline bool RPCCommand::has_createunit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RPCCommand::set_has_createunit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RPCCommand::clear_has_createunit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::opentxs::proto::CreateInstrumentDefinition& RPCCommand::createunit() const {
  const ::opentxs::proto::CreateInstrumentDefinition* p = createunit_;
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.createunit)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::CreateInstrumentDefinition*>(
      &::opentxs::proto::_CreateInstrumentDefinition_default_instance_);
}
inline ::opentxs::proto::CreateInstrumentDefinition* RPCCommand::release_createunit() {
  // @@protoc_insertion_point(field_release:opentxs.proto.RPCCommand.createunit)
  clear_has_createunit();
  ::opentxs::proto::CreateInstrumentDefinition* temp = createunit_;
  createunit_ = NULL;
  return temp;
}
inline ::opentxs::proto::CreateInstrumentDefinition* RPCCommand::mutable_createunit() {
  set_has_createunit();
  if (createunit_ == NULL) {
    createunit_ = new ::opentxs::proto::CreateInstrumentDefinition;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.createunit)
  return createunit_;
}
inline void RPCCommand::set_allocated_createunit(::opentxs::proto::CreateInstrumentDefinition* createunit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(createunit_);
  }
  if (createunit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      createunit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, createunit, submessage_arena);
    }
    set_has_createunit();
  } else {
    clear_has_createunit();
  }
  createunit_ = createunit;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.RPCCommand.createunit)
}

// optional .opentxs.proto.SendPayment sendpayment = 16;
inline bool RPCCommand::has_sendpayment() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RPCCommand::set_has_sendpayment() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RPCCommand::clear_has_sendpayment() {
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::opentxs::proto::SendPayment& RPCCommand::sendpayment() const {
  const ::opentxs::proto::SendPayment* p = sendpayment_;
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.sendpayment)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::SendPayment*>(
      &::opentxs::proto::_SendPayment_default_instance_);
}
inline ::opentxs::proto::SendPayment* RPCCommand::release_sendpayment() {
  // @@protoc_insertion_point(field_release:opentxs.proto.RPCCommand.sendpayment)
  clear_has_sendpayment();
  ::opentxs::proto::SendPayment* temp = sendpayment_;
  sendpayment_ = NULL;
  return temp;
}
inline ::opentxs::proto::SendPayment* RPCCommand::mutable_sendpayment() {
  set_has_sendpayment();
  if (sendpayment_ == NULL) {
    sendpayment_ = new ::opentxs::proto::SendPayment;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.sendpayment)
  return sendpayment_;
}
inline void RPCCommand::set_allocated_sendpayment(::opentxs::proto::SendPayment* sendpayment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sendpayment_);
  }
  if (sendpayment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sendpayment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sendpayment, submessage_arena);
    }
    set_has_sendpayment();
  } else {
    clear_has_sendpayment();
  }
  sendpayment_ = sendpayment;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.RPCCommand.sendpayment)
}

// optional .opentxs.proto.MoveFunds movefunds = 17;
inline bool RPCCommand::has_movefunds() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RPCCommand::set_has_movefunds() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RPCCommand::clear_has_movefunds() {
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::opentxs::proto::MoveFunds& RPCCommand::movefunds() const {
  const ::opentxs::proto::MoveFunds* p = movefunds_;
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.movefunds)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::MoveFunds*>(
      &::opentxs::proto::_MoveFunds_default_instance_);
}
inline ::opentxs::proto::MoveFunds* RPCCommand::release_movefunds() {
  // @@protoc_insertion_point(field_release:opentxs.proto.RPCCommand.movefunds)
  clear_has_movefunds();
  ::opentxs::proto::MoveFunds* temp = movefunds_;
  movefunds_ = NULL;
  return temp;
}
inline ::opentxs::proto::MoveFunds* RPCCommand::mutable_movefunds() {
  set_has_movefunds();
  if (movefunds_ == NULL) {
    movefunds_ = new ::opentxs::proto::MoveFunds;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.movefunds)
  return movefunds_;
}
inline void RPCCommand::set_allocated_movefunds(::opentxs::proto::MoveFunds* movefunds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(movefunds_);
  }
  if (movefunds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      movefunds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, movefunds, submessage_arena);
    }
    set_has_movefunds();
  } else {
    clear_has_movefunds();
  }
  movefunds_ = movefunds;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.RPCCommand.movefunds)
}

// repeated .opentxs.proto.AddContact addcontact = 18;
inline int RPCCommand::addcontact_size() const {
  return addcontact_.size();
}
inline const ::opentxs::proto::AddContact& RPCCommand::addcontact(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.addcontact)
  return addcontact_.Get(index);
}
inline ::opentxs::proto::AddContact* RPCCommand::mutable_addcontact(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.addcontact)
  return addcontact_.Mutable(index);
}
inline ::opentxs::proto::AddContact* RPCCommand::add_addcontact() {
  // @@protoc_insertion_point(field_add:opentxs.proto.RPCCommand.addcontact)
  return addcontact_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddContact >*
RPCCommand::mutable_addcontact() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.RPCCommand.addcontact)
  return &addcontact_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddContact >&
RPCCommand::addcontact() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.RPCCommand.addcontact)
  return addcontact_;
}

// repeated .opentxs.proto.VerifyClaim verifyclaim = 19;
inline int RPCCommand::verifyclaim_size() const {
  return verifyclaim_.size();
}
inline const ::opentxs::proto::VerifyClaim& RPCCommand::verifyclaim(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.verifyclaim)
  return verifyclaim_.Get(index);
}
inline ::opentxs::proto::VerifyClaim* RPCCommand::mutable_verifyclaim(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.verifyclaim)
  return verifyclaim_.Mutable(index);
}
inline ::opentxs::proto::VerifyClaim* RPCCommand::add_verifyclaim() {
  // @@protoc_insertion_point(field_add:opentxs.proto.RPCCommand.verifyclaim)
  return verifyclaim_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::VerifyClaim >*
RPCCommand::mutable_verifyclaim() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.RPCCommand.verifyclaim)
  return &verifyclaim_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::VerifyClaim >&
RPCCommand::verifyclaim() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.RPCCommand.verifyclaim)
  return verifyclaim_;
}

// repeated .opentxs.proto.SendMessage sendmessage = 20;
inline int RPCCommand::sendmessage_size() const {
  return sendmessage_.size();
}
inline const ::opentxs::proto::SendMessage& RPCCommand::sendmessage(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.sendmessage)
  return sendmessage_.Get(index);
}
inline ::opentxs::proto::SendMessage* RPCCommand::mutable_sendmessage(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.sendmessage)
  return sendmessage_.Mutable(index);
}
inline ::opentxs::proto::SendMessage* RPCCommand::add_sendmessage() {
  // @@protoc_insertion_point(field_add:opentxs.proto.RPCCommand.sendmessage)
  return sendmessage_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::SendMessage >*
RPCCommand::mutable_sendmessage() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.RPCCommand.sendmessage)
  return &sendmessage_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::SendMessage >&
RPCCommand::sendmessage() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.RPCCommand.sendmessage)
  return sendmessage_;
}

// repeated .opentxs.proto.Verification acceptverification = 21;
inline int RPCCommand::acceptverification_size() const {
  return acceptverification_.size();
}
inline const ::opentxs::proto::Verification& RPCCommand::acceptverification(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.acceptverification)
  return acceptverification_.Get(index);
}
inline ::opentxs::proto::Verification* RPCCommand::mutable_acceptverification(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.acceptverification)
  return acceptverification_.Mutable(index);
}
inline ::opentxs::proto::Verification* RPCCommand::add_acceptverification() {
  // @@protoc_insertion_point(field_add:opentxs.proto.RPCCommand.acceptverification)
  return acceptverification_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::Verification >*
RPCCommand::mutable_acceptverification() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.RPCCommand.acceptverification)
  return &acceptverification_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::Verification >&
RPCCommand::acceptverification() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.RPCCommand.acceptverification)
  return acceptverification_;
}

// repeated .opentxs.proto.AcceptPendingPayment acceptpendingpayment = 22;
inline int RPCCommand::acceptpendingpayment_size() const {
  return acceptpendingpayment_.size();
}
inline const ::opentxs::proto::AcceptPendingPayment& RPCCommand::acceptpendingpayment(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.RPCCommand.acceptpendingpayment)
  return acceptpendingpayment_.Get(index);
}
inline ::opentxs::proto::AcceptPendingPayment* RPCCommand::mutable_acceptpendingpayment(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.RPCCommand.acceptpendingpayment)
  return acceptpendingpayment_.Mutable(index);
}
inline ::opentxs::proto::AcceptPendingPayment* RPCCommand::add_acceptpendingpayment() {
  // @@protoc_insertion_point(field_add:opentxs.proto.RPCCommand.acceptpendingpayment)
  return acceptpendingpayment_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AcceptPendingPayment >*
RPCCommand::mutable_acceptpendingpayment() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.RPCCommand.acceptpendingpayment)
  return &acceptpendingpayment_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AcceptPendingPayment >&
RPCCommand::acceptpendingpayment() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.RPCCommand.acceptpendingpayment)
  return acceptpendingpayment_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RPCCommand_2eproto__INCLUDED
